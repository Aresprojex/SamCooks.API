// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SamCooks.API.DbContext;

namespace SamCooks.API.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.25")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("SamCooks.API.Entities.ApplicationRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("SamCooks.API.Entities.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("HasAcceptedTerms")
                        .HasColumnType("bit");

                    b.Property<bool>("IsAccountLocked")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFirstTimeLogin")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastLoginDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("ProfilePicture")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReferralCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("SamCooks.API.Entities.Artist", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Bio")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Region")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TotalSongs")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Artists");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e7d58c75-18bc-4868-b54d-0a1fdf8fe94d"),
                            Bio = "21 Savage is a British rapper known for his <i>distinct trap style</i> and introspective lyrics. Born in London, he moved to Atlanta at a young age and emerged as a prominent figure in the hip-hop scene. His music often reflects on his personal experiences, addressing topics like <i>violence</i>, <i>poverty</i>, and <b><span style='color: red';>social injustice</span></b>.",
                            CreatedOn = new DateTime(2023, 8, 15, 13, 35, 50, 168, DateTimeKind.Utc).AddTicks(6301),
                            IsActive = false,
                            IsDeleted = false,
                            Location = "Atlanta, Georgia",
                            Name = "21 Savage",
                            Region = "South",
                            TotalSongs = 0
                        });
                });

            modelBuilder.Entity("SamCooks.API.Entities.ArtistEra", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ArtistId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("EraId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ArtistId");

                    b.HasIndex("EraId");

                    b.ToTable("ArtistEra");

                    b.HasData(
                        new
                        {
                            Id = new Guid("5766d40c-03dc-4cbc-9311-68e02fd2c714"),
                            ArtistId = new Guid("e7d58c75-18bc-4868-b54d-0a1fdf8fe94d"),
                            CreatedOn = new DateTime(2023, 8, 15, 13, 35, 50, 167, DateTimeKind.Utc).AddTicks(3782),
                            EraId = new Guid("2fd8696a-414b-41e7-a661-b0dbddc309fa"),
                            IsActive = false,
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("24cddc59-1ed9-4e36-b90a-874f344a9cd7"),
                            ArtistId = new Guid("e7d58c75-18bc-4868-b54d-0a1fdf8fe94d"),
                            CreatedOn = new DateTime(2023, 8, 15, 13, 35, 50, 167, DateTimeKind.Utc).AddTicks(5187),
                            EraId = new Guid("24889416-93f3-44ee-a240-d3d03c5acdd2"),
                            IsActive = false,
                            IsDeleted = false
                        });
                });

            modelBuilder.Entity("SamCooks.API.Entities.Era", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Date")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Era");

                    b.HasData(
                        new
                        {
                            Id = new Guid("2fd8696a-414b-41e7-a661-b0dbddc309fa"),
                            CreatedOn = new DateTime(2023, 8, 15, 13, 35, 50, 169, DateTimeKind.Utc).AddTicks(394),
                            Date = "1995",
                            IsActive = false,
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("24889416-93f3-44ee-a240-d3d03c5acdd2"),
                            CreatedOn = new DateTime(2023, 8, 15, 13, 35, 50, 169, DateTimeKind.Utc).AddTicks(706),
                            Date = "1999",
                            IsActive = false,
                            IsDeleted = false
                        });
                });

            modelBuilder.Entity("SamCooks.API.Entities.Keyword", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Word")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Keyword");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c1326157-0193-4fff-aa13-6c024b6db075"),
                            CreatedOn = new DateTime(2023, 8, 15, 13, 35, 50, 169, DateTimeKind.Utc).AddTicks(5102),
                            IsActive = false,
                            IsDeleted = false,
                            Word = "#Violence"
                        },
                        new
                        {
                            Id = new Guid("3a2d81f8-e711-4b65-bb25-e858c9718337"),
                            CreatedOn = new DateTime(2023, 8, 15, 13, 35, 50, 169, DateTimeKind.Utc).AddTicks(5446),
                            IsActive = false,
                            IsDeleted = false,
                            Word = "#Success"
                        },
                        new
                        {
                            Id = new Guid("038075d4-0f58-40f3-b94c-8e62bfafdcac"),
                            CreatedOn = new DateTime(2023, 8, 15, 13, 35, 50, 169, DateTimeKind.Utc).AddTicks(5464),
                            IsActive = false,
                            IsDeleted = false,
                            Word = "#Loyalty"
                        },
                        new
                        {
                            Id = new Guid("87631796-cb7e-4f12-9672-40de4f95666c"),
                            CreatedOn = new DateTime(2023, 8, 15, 13, 35, 50, 169, DateTimeKind.Utc).AddTicks(5468),
                            IsActive = false,
                            IsDeleted = false,
                            Word = "#LifeOverWealthOrDeath"
                        },
                        new
                        {
                            Id = new Guid("a814b9c4-1f18-42e7-8305-233ba7fa7e4c"),
                            CreatedOn = new DateTime(2023, 8, 15, 13, 35, 50, 169, DateTimeKind.Utc).AddTicks(5470),
                            IsActive = false,
                            IsDeleted = false,
                            Word = "#Struggles"
                        },
                        new
                        {
                            Id = new Guid("b69ba75f-7a49-4f3e-b0f0-7a3d9fb550c9"),
                            CreatedOn = new DateTime(2023, 8, 15, 13, 35, 50, 169, DateTimeKind.Utc).AddTicks(5475),
                            IsActive = false,
                            IsDeleted = false,
                            Word = "#Betrayal"
                        },
                        new
                        {
                            Id = new Guid("31f002c8-0686-4283-9cd0-b56ba095930a"),
                            CreatedOn = new DateTime(2023, 8, 15, 13, 35, 50, 169, DateTimeKind.Utc).AddTicks(5477),
                            IsActive = false,
                            IsDeleted = false,
                            Word = "#GunViolence"
                        });
                });

            modelBuilder.Entity("SamCooks.API.Entities.Song", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ArtistId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("CulturallySignificant")
                        .HasColumnType("int");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LinkedLyrics")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OverallTheme")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReasonOfSelection")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SociallyConscious")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ArtistId");

                    b.ToTable("Song");

                    b.HasData(
                        new
                        {
                            Id = new Guid("24cddc59-1ed9-4e36-b90a-874f344a9cd7"),
                            ArtistId = new Guid("e7d58c75-18bc-4868-b54d-0a1fdf8fe94d"),
                            CreatedOn = new DateTime(2023, 8, 15, 13, 35, 50, 170, DateTimeKind.Utc).AddTicks(2253),
                            CulturallySignificant = 1,
                            IsActive = false,
                            IsDeleted = false,
                            LinkedLyrics = "https://genius.com/21-savage-a-lot-lyrics",
                            Name = "A Lot",
                            OverallTheme = "Reflection",
                            ReasonOfSelection = "This song addresses various social issues and personal experiences, including the effects of violence, racism, and the struggle for success.",
                            SociallyConscious = 1
                        });
                });

            modelBuilder.Entity("SamCooks.API.Entities.SongKeyword", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("KeywordId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("SongId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("KeywordId");

                    b.HasIndex("SongId");

                    b.ToTable("SongKeyword");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c1326157-0193-4fff-aa13-6c024b6db075"),
                            CreatedOn = new DateTime(2023, 8, 15, 13, 35, 50, 169, DateTimeKind.Utc).AddTicks(8682),
                            IsActive = false,
                            IsDeleted = false,
                            KeywordId = new Guid("c1326157-0193-4fff-aa13-6c024b6db075"),
                            SongId = new Guid("24cddc59-1ed9-4e36-b90a-874f344a9cd7")
                        },
                        new
                        {
                            Id = new Guid("cdec1b46-f382-4b34-a376-c4e1952f6340"),
                            CreatedOn = new DateTime(2023, 8, 15, 13, 35, 50, 169, DateTimeKind.Utc).AddTicks(9415),
                            IsActive = false,
                            IsDeleted = false,
                            KeywordId = new Guid("3a2d81f8-e711-4b65-bb25-e858c9718337"),
                            SongId = new Guid("24cddc59-1ed9-4e36-b90a-874f344a9cd7")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("SamCooks.API.Entities.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("SamCooks.API.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("SamCooks.API.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("SamCooks.API.Entities.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SamCooks.API.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("SamCooks.API.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SamCooks.API.Entities.ArtistEra", b =>
                {
                    b.HasOne("SamCooks.API.Entities.Artist", "Artist")
                        .WithMany("Eras")
                        .HasForeignKey("ArtistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SamCooks.API.Entities.Era", "Era")
                        .WithMany()
                        .HasForeignKey("EraId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SamCooks.API.Entities.Song", b =>
                {
                    b.HasOne("SamCooks.API.Entities.Artist", "Artist")
                        .WithMany("Songs")
                        .HasForeignKey("ArtistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SamCooks.API.Entities.SongKeyword", b =>
                {
                    b.HasOne("SamCooks.API.Entities.Keyword", "Keyword")
                        .WithMany()
                        .HasForeignKey("KeywordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SamCooks.API.Entities.Song", "Song")
                        .WithMany("Keywords")
                        .HasForeignKey("SongId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
